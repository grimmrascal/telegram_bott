import os
import logging
import asyncio
import random
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞ Railway.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
active_users = set()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    active_users.add(user_id)
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –¢–µ–ø–µ—Ä —Ç–∏ –≤ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /sendnow (–º–∏—Ç—Ç—î–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞)
@dp.message(Command("sendnow"))
async def send_now_handler(message: types.Message):
    messages = [
        "–¢–∏ —á—É–¥–æ–≤–∏–π!", "–ù–µ –∑–∞–±—É–≤–∞–π –ø–æ—Å–º—ñ—Ö–∞—Ç–∏—Å—è!", "–í —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ!", "–¢–∏ –æ—Å–æ–±–ª–∏–≤–∏–π!"
    ]
    for user_id in active_users:
        try:
            await bot.send_message(user_id, random.choice(messages))
        except Exception as e:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")
    await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º!")

# –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –æ 10:00 –∑–∞ –ö–∏—î–≤–æ–º
async def send_daily_message():
    messages = [
        "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! üåû –¢–∏ —á—É–¥–æ–≤–∏–π!",
        "–ù–µ—Ö–∞–π —Ü–µ–π –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ —Ç–æ–±—ñ —â–æ—Å—å —Ö–æ—Ä–æ—à–µ!",
        "–¢–∏ —Å–∏–ª—å–Ω–∏–π, —É —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ!",
        "–ó –ø–æ—Å–º—ñ—à–∫–æ—é –ª–µ–≥—à–µ —Ä—É—Ö–∞—Ç–∏—Å—è –≤–ø–µ—Ä–µ–¥! üòä"
    ]
    for user_id in active_users:
        try:
            await bot.send_message(user_id, random.choice(messages))
        except Exception as e:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def schedule_daily_message():
    scheduler = AsyncIOScheduler()
    kyiv_tz = timezone("Europe/Kiev")
    trigger = CronTrigger(hour=10, minute=0, timezone=kyiv_tz)  # 10:00 —Ä–∞–Ω–∫—É –∑–∞ –ö–∏—î–≤–æ–º
    scheduler.add_job(send_daily_message, trigger)
    scheduler.start()

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    asyncio.create_task(schedule_daily_message())  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())