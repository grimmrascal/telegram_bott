import logging
import os
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from dotenv import load_dotenv
import schedule
import time

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env.")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∏—î–º–Ω—ñ —Ñ—Ä–∞–∑–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
pleasant_phrases = [
    "–ü—Ä–∏–≤—ñ—Ç! –ë–∞–∂–∞—é —Ç–æ–±—ñ —á—É–¥–æ–≤–æ–≥–æ –¥–Ω—è! üåû",
    "–ù–µ—Ö–∞–π —Ü–µ–π –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ —Ç–æ–±—ñ —Ä–∞–¥—ñ—Å—Ç—å —ñ —É—Å–ø—ñ—Ö–∏! üåü",
    "–¢–∏ —á—É–¥–æ–≤–∞ –ª—é–¥–∏–Ω–∞! –°–ø—ñ–ª—å–Ω–æ –∑ —Ç–æ–±–æ—é —Å–≤—ñ—Ç —Å—Ç–∞—î –∫—Ä–∞—â–∏–º! üíñ",
    "–ù–µ—Ö–∞–π —É—Å—ñ —Ç–≤–æ—ó –º—Ä—ñ—ó –∑–¥—ñ–π—Å–Ω—è—Ç—å—Å—è! ‚ú®",
    "–ü–æ—Å–º—ñ—Ö–Ω–∏—Å—å, —Ç–∏ –∑–∞—Å–ª—É–≥–æ–≤—É—î—à –Ω–∞ –Ω–∞–π–∫—Ä–∞—â–µ! üòä"
]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó —Ñ—Ä–∞–∑–∏
async def send_random_message(user_id):
    random_phrase = random.choice(pleasant_phrases)
    try:
        await bot.send_message(user_id, random_phrase)
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
def schedule_message():
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
    schedule.every(10).minutes.do(send_random_message, user_id=USER_ID)

# –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ–≤–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
USER_ID = <ID_–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞>  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—à –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
schedule_message()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É –Ω–∞ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
loop = asyncio.get_event_loop()
loop.create_task(run_scheduler())

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –±–æ—Ç, —è–∫–∏–π –Ω–∞–¥—Å–∏–ª–∞—î –ø—Ä–∏—î–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
