import os
import random
import asyncio
import logging
import requests
import psycopg2
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
PIXABAY_API_KEY = os.getenv("PIXABAY_API_KEY")
PHOTO_CATEGORIES = ["cute animals", "beautiful landscapes"]  # –¢–µ–º–∏ –¥–ª—è —Ñ–æ—Ç–æ

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# Telegram –±–æ—Ç
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å
kyiv_tz = timezone("Europe/Zaporozhye")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode="require")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
def create_table():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            user_id BIGINT UNIQUE,
            first_name TEXT,
            username TEXT
        )
    """)
    conn.commit()
    cur.close()
    conn.close()

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def add_user(user_id, first_name, username):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO users (user_id, first_name, username) 
        VALUES (%s, %s, %s) 
        ON CONFLICT (user_id) DO NOTHING
    """, (user_id, first_name, username))
    conn.commit()
    cur.close()
    conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def get_all_users():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users")
    users = [row[0] for row in cur.fetchall()]
    cur.close()
    conn.close()
    return users

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def get_random_message():
    messages = [
        "–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!",
        "–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ —É—Å–º—ñ—Ö–∞—Ç–∏—Å—å! üòä",
        "–ù–µ—Ö–∞–π —É–¥–∞—á–∞ –±—É–¥–µ –Ω–∞ –≤–∞—à–æ–º—É –±–æ—Ü—ñ!",
        "–¶—ñ–Ω—É–π—Ç–µ –∫–æ–∂–µ–Ω –º–æ–º–µ–Ω—Ç ‚ù§Ô∏è"
    ]
    return random.choice(messages)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –∑ Pixabay
def get_random_photo():
    category = random.choice(PHOTO_CATEGORIES)
    url = f"https://pixabay.com/api/?key={PIXABAY_API_KEY}&q={category}&image_type=photo&per_page=50"
    response = requests.get(url).json()
    if "hits" in response and response["hits"]:
        return random.choice(response["hits"])["webformatURL"]
    return None

# –†–æ–∑—Å–∏–ª–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ —Ñ–æ—Ç–æ
async def send_random_messages():
    users = get_all_users()
    for user_id in users:
        message = get_random_message()
        photo_url = get_random_photo()
        if photo_url:
            await bot.send_photo(user_id, photo_url, caption=message)
        else:
            await bot.send_message(user_id, message)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await add_user(message.from_user.id, message.from_user.first_name, message.from_user.username)
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {hbold(message.from_user.first_name)}! –Ø –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ñ–æ—Ç–æ.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /sendnow
@dp.message(Command("sendnow"))
async def send_now_handler(message: types.Message):
    await send_random_messages()

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()
scheduler.add_job(send_random_messages, "cron", hour=18, timezone=kyiv_tz)  # –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –æ 18:00
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    create_table()  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())