import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.filters import Command
import schedule
import time

TOKEN = "redboom_bot"  # –í—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º—É—Ç—å —Ä–æ–∑—Å–∏–ª–∫—É
subscribers = set()

# –°–ø–∏—Å–æ–∫ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
random_messages = [
    "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?",
    "–ù–µ –∑–∞–±—É–≤–∞–π –ø–æ—Å–º—ñ—Ö–∞—Ç–∏—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ üòä",
    "–¢–∏ –º–æ–ª–æ–¥–µ—Ü—å! –ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ!",
    "–ß–∞—Å –≤–∏–ø–∏—Ç–∏ –∫–∞–≤–∏ ‚òïÔ∏è",
    "–ù–æ–≤–∏–π –¥–µ–Ω—å ‚Äì –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ!",
    "–¶—ñ–∫–∞–≤–æ, —â–æ —Ö–æ—Ä–æ—à–æ–≥–æ —Å—Ç–∞–ª–æ—Å—è —É —Ç–µ–±–µ —Å—å–æ–≥–æ–¥–Ω—ñ?"
]

@dp.message(Command("start"))
async def start(message: types.Message):
    subscribers.add(message.chat.id)
    await message.answer("–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É!")

@dp.message(Command("stop"))
async def stop(message: types.Message):
    subscribers.discard(message.chat.id)
    await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Ä–æ–∑—Å–∏–ª–∫–∏.")

async def send_random_message():
    """–ù–∞–¥—Å–∏–ª–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—É"""
    if not subscribers:
        return
    message_text = random.choice(random_messages)
    for user_id in subscribers:
        try:
            await bot.send_message(user_id, message_text)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ {user_id}: {e}")

def schedule_task():
    """–§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ä–æ–∑–∫–ª–∞–¥—É"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    while True:
        schedule.run_pending()
        time.sleep(10)

@dp.message(Command("send_now"))
async def send_now(message: types.Message):
    """–ú–∏—Ç—Ç—î–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞"""
    await send_random_message()
    await message.answer("–†–∞–Ω–¥–æ–º–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤—Ä—É—á–Ω—É!")

async def main():
    # –†–æ–∑—Å–∏–ª–∫–∞ —â–æ–¥–Ω—è –æ 10:00 —Ç–∞ 18:00
    schedule.every().day.at("10:00").do(lambda: asyncio.create_task(send_random_message()))
    schedule.every().day.at("18:00").do(lambda: asyncio.create_task(send_random_message()))

    loop = asyncio.get_running_loop()
    loop.create_task(schedule_task())

    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
